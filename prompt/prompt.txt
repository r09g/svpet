Desktop Pet Game Design Document

<Project Description>
This project is a desktop pet that uses Stardew Valley art and animation asset. The pet would be able to roam freely on desktop and user would be able to interact with it.
</Project Description>


<Coding Guidelines>
Take a modular development approach and generate clear documentation. Maintain clean directory structure. Put all source code in src folder. Git version control is already initialized. Make Git commits once each module is developed and tested.

Framework:
Electron js with Python modules.

Program Interrupt:
Add try-except to catch any Ctrl-C key presses, if caught, exit application properly.

Shell Commands:
For all shell commands, provide the command and expected results. User will run and report back observations.
</Coding Guidelines>


<Mechanics>
The mechanics or controller of the pet system.

{{./mechanics/mechanics.txt}}
</Mechanics>


<Visualization>
Interface: At OS-level. No frame. Base layer background should be fully transparent (so other applications and windows remain fully visible). The pet pixmap should be visible and always-on-top (higher than all other applications). Mouse clicks on the pet pixmap should be captured by the application and emote should play, while everywhere else should be click-through.

Visual images and animations to show in different states of the pet defined in the mechanics section.

{{./visualization/animations.txt}}
</Visualization>


<Chat>
{{./llm_chat/llm_chat.txt}}

The chat system prompt and instructions:
{{./llm_chat/chat_sys_prompt.txt}}

The save system prompt and instructions to use for condensing and summarizing chat history:
{{./llm_chat/save_sys_prompt.txt}}
</Chat>


<Misc. Features>
Fully offline and local application.
Menubar tray icon: 
- Functions: Add Pet, Remove Pet, Connect LLM, Quit.
- Icon: Use frame 0 of sprite sheet {{$CWD}}/visualization/sprite_sheets/chicken_brown.png
Saving: the application will make automatic saves of each pet's memory (outlined in mechanics section) every minute, on top of saves when interaction happens, such as user pets it. The saves will be stored locally in a file. When user opens the application, if save files are found, then the pets will be restored with memory.
</Misc. Features>
